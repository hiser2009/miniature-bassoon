name: Meraki Deployment Pipeline

on:
  push:
    branches:
      - main
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          pip install requests
          pip install meraki

      - name: Show Networks
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          printenv | grep MERAKI_API_KEY
          printenv | grep ORG_ID
          python show/show_networks.py
          python -c "print('~' * 40)"

  approval_deploy_dev_staging:
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Approval for deploy_dev_staging
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequest } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            await github.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              content: 'eyes'
            })

  deploy_dev_staging:
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: approval_deploy_dev_staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          pip install requests
          pip install meraki
          sudo apt-get update -y
          sudo apt-get install tree -y

      - name: Print Vars
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          printenv

      - name: Show Networks
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          python show/show_networks.py
          python -c "print('~' * 40)"

      - name: Create Networks
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          python create_staging_network/pomona_staging_network/pomona_network.py
          python -c "print('~' * 40)"

      - name: Show Networks
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          python show/show_networks.py
          python -c "print('~' * 40)"

      - name: Create VLANS & DHCP
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          python create_staging_vlans_dhcp/pomona_staging_vlans_dhcp/pomona_staging_vlans_dhcp.py
          python -c "print('~' * 40)"
            
      - name: Show VLANS & DHCP
        env:
          MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
          ORG_ID: ${{ secrets.ORG_ID }}
        run: |
          python show/show_vlans_dhcp.py
          python -c "print('~' * 40)"

      - name: Persist created_network_id.txt
        uses: actions/upload-artifact@v2
        with:
          name: created_network_id
          path: created_network_id.txt

  delete_staging_env:
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [deploy_dev_staging, build]
    strategy:
      matrix:
        hold:
          steps:
            - name: Hold for approval
              uses: actions/github-script@v4
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const { data: pullRequest } = await github.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.payload.pull_request.number
                  });

                  await github.reactions.createForIssue({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    content: 'eyes'
                  });

        delete:
          steps:
            - name: Checkout code
              uses: actions/checkout@v2

            # Add steps for deleting staging environment

    env:
      MERAKI_API_KEY: ${{ secrets.MERAKI_API_KEY }}
      ORG_ID: ${{ secrets.ORG_ID }}

# Define a workflow to trigger the matrix job based on the branch
  delete_staging_env_workflow:
    name: Delete Staging Environment Workflow
    on:
      workflow_run:
        workflows: ["Meraki Deployment Pipeline"]
        types:
          - completed
    jobs:
      delete_staging_env_job:
        runs-on: ubuntu-latest
        if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.workflow_id == ${{ github.event.workflow_run.target_workflow_id }}
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Approve delete staging environment
            uses: actions/github-script@v4
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const { data: workflowRuns } = await github.actions.listRepoWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: context.payload.workflow_run.workflow_id,
                  branch: context.payload.workflow_run.head_branch
                });

                const deleteStagingEnvRun = workflowRuns.workflow_runs.find(run => run.name === 'delete_staging_env_job');

                if (deleteStagingEnvRun) {
                  await github.actions.approveWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: deleteStagingEnvRun.id
                  });
                }

  deploy_prod:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          pip install requests
          pip install meraki
          pip install --upgrade meraki
          sudo apt-get update -y
          sudo apt-get install tree -y

      - name: Show Networks
        run: |
          python show/show_networks.py
          python -c "print('~' * 40)"
      
      - name: Create VLANS & DHCP
        run: |
          python create_production_vlans_dhcp/pomona_prod_vlans_dhcp/pomona_prod_vlans_dhcp.py
          python -c "print('~' * 40)"

      - name: Show VLANS & DHCP
        run: |
          python show/show_vlans_dhcp.py
          python -c "print('~' * 40)"
